const fs = require('fs');
const path = require('path');
const { src, dest } = require('gulp');
const concat = require('gulp-concat-util');
const nunjucksRender = require('gulp-nunjucks-render');
const data = require('gulp-data');

function getCopyrightYear(env) {
  const today = new Date();
  const year = today.getFullYear();

  return env.addGlobal('copyright', year);
}

function concatenateMacros() {
  const concatenateMacroFileName = `prototype.nunjucks`;
  return src([
    `src/components/**/*.nunjucks`,
    `!src/components/prototype.nunjucks`,
  ])
    .pipe(concat(concatenateMacroFileName))
    .pipe(
      concat.header(
        "{# DO NOT EDIT: This file is automatically generated by the project's build task #}\n"
      )
    )
    .pipe(dest(`src/components`));
}

function getDataForTemplates() {
  const fullDataPath = path.join(process.cwd(), 'src/data');
  let allDataFiles = [],
    data = {};

  if (fs.existsSync(fullDataPath)) {
    allDataFiles = allDataFiles.concat(
      fs.readdirSync(fullDataPath).filter((f) => f.indexOf('.json') !== -1)
    );
  }
  allDataFiles.forEach((f) => {
    let namespace = f.replace(/.json/, ''),
      fullFilePath = path.join(process.cwd(), 'src/data', f);
    if (fs.existsSync(fullFilePath)) {
      let contents = fs.readFileSync(fullFilePath, { encoding: 'UTF-8' }),
        json;
      try {
        json = JSON.parse(contents);
        data[namespace] = json;
      } catch (error) {
        console.log(
          error,
          `Warning: Could not parse data file ${fullFilePath} in JSON for nunjucks`
        );
      }
    }
  });
  return data;
}

function compileHtml() {
  return src('src/pages/**/*.nunjucks')
    .pipe(data(getDataForTemplates))
    .pipe(
      nunjucksRender({
        path: ['src/templates', 'src/components'],
        ext: '.html',
        manageEnv: function (env) {
          getCopyrightYear(env);
        },
      })
    )
    .pipe(dest('public'));
}

module.exports = { concatenateMacros, compileHtml };
